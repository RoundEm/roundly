type Query {
    userLeagues(userId: ID!): [League!]!
    # TODO: should I be setting default params to true/false for the completed field of the following two queries?
    scheduledLeagueRounds(leagueId: ID!): [Round!]!
    completedLeagueRounds(leagueId: ID!): [Round!]!
    # leagueInfo returns league name, players, end date
    leagueInfo(leagueId: ID!): [League!]!
}
 
type Mutation {
    # User 
    createUser(data: CreateUserInput!): AuthPayload!
    loginUser(email: String!, password: String!): AuthPayload!
    updateUser(data: UpdateUserInput!): User!
    deleteUser: User!
    # League  (must be AuthorizedAsAdmin to change league settings)
    createLeague(data: CreateLeagueInput!) League!
    deleteLeague(leagueId: ID!)
    updateBasicLeagueInfo(leagueId: ID!, data: UpdateBasicLeagueInput):
    createLeaguePointSetting(leagueId: ID!, data: CreatePointSettingInput):
    updateLeaguePointSetting(leagueId: ID!, data: UpdatePointSettingInput):
    deleteLeaguePointSetting(leagueId: ID!)
    updateRoundPointSetting(leagueId: ID!, roundId: ID! data: UpdatePointSettingInput):
    deleteRoundPointSetting(leagueId: ID!, roundId: ID!)
    # TODO: set these player inputs to not be inputs if all youre updating is name
    createLeaguePlayer(leagueId: ID!, data: CreateLeaguePlayer)
    updateLeaguePlayer(leagueId: ID!, data: UpdateLeaguePlayer)
    deleteLeaguePlayer(leagueId: ID!)
    createNewLeagueRound(leagueId: ID!, data: )
    updateLeagueBasicRoundInfo(leagueId: ID!, data: )
    deleteLeagueRound(leagueId: ID!)
    updatePlayerPointAllocation(leagueId: ID!, data: )
    addPlayerToRound(leagueId: ID!, data: )
    deletePlayerFromRound(leagueId: ID!, data: )
    
    # TODO: Implement these comment types after MVP
    # createRoundComment(data: CreatePostInput!): Post!
    # deleteRoundComment(id: ID!): Post!
    # updateRoundComment(id: ID!, data: UpdatePostInput!): Post!
    # createLeagueComment(data: CreateCommentInput!): Comment!
    # deleteLeagueComment(id: ID!): Comment!
    # updateLeagueComment(id: ID!, data: UpdateCommentInput!): Comment!
}
input CreateUserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}
input UpdateUserInput {
    firstName: String
    lastName: String
    email: String
    password: String
}
input CreateLeagueInput {
    name: String!
    endDate: String!
    # TODO: Leave as optional to set no players when creating league?
    players: [Player!]
    pointSettings: [PointSetting!]
}
input UpdateBasicLeagueInput {
    name: String
    endDate: String
}
input CreatePointSettingInput {
    name: String!
    weight: Float!
}
input UpdatePointSettingInput {
    name: String
    weight: Float
}
input CreateLeaguePlayer {
    name: String!
    # handicap: Float
}
input UpdateLeaguePlayer {
    name: String
    # handicap: Float
}
# TODO: Implement these comment types after MVP
# type Comment {
#     id: ID!
#     text: String!
#     author: User!
#     post: Post!
# }
# input CreateCommentInput {
#     text: String!
#     post: ID!
# }
# input UpdateCommentInput {
#     text: String
# }

type User {
    id: ID!
    username: String!
    lastName: String!
    firstName: String!
    email: String!
    password: String!
    leagueCreator: [League!] 
    leaguesAuthorizedAsAdmin: [League!] 
}

type Round {
    id: ID!
    golfCourse: String!
    # change this to custom Date type?
    date: String!
    players: [Player!]!
    roundName: String
    # TODO: Way to default this to false?
    # Marking as complete adds points to player totals but they can still be edited
    completed: Boolean
    # TODO: make this default to overall league-level point settings but allow each round to have updated point settings? Changes made to league-level settings will cascade to all rounds while round-level settings are distinct
    pointSettings: [PointSetting!]!
}

type Player {
    id: ID!
    name: String!
    # TODO: don't think i need leagues here since that's more of a User thing
    # leagues: [League]
    rounds: [Round]
    # TODO: track handicap?
    # handicap: Float
}

type League {
    id: ID!
    name: String!
    # change this to custom Date type?
    endDate: String!
    players: [Player!]!
    # TODO: Should make this array optional in case they want to just track and enter points manually? Also ties into `Point` type
    pointSettings: [PointSetting!]!
}
# TODO: how to implement round/league level pointSetting?? Make separate types for just PointSetting and remove name/weight. What about 
type CustomRoundPointSetting {
    id: ID!
    name: String!
    weight: Float!
    round: Round!
}
type LeaguePointSetting {
    id: ID!
    name: String!
    weight: Float!
    # TODO: how to implement round/league level pointSetting??
    league: League!
}

type PointsEarned {
    pointId: PointSetting!
    league: League!
    round: Round!
    player: Player!
}


