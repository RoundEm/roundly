type Query {
    userLeagues(userId: ID!): [League!]!
    # TODO: do other User queries need to go here for auth or anything else?
    league(leagueId: ID!): League!
    leaguePointSettings(leagueId: ID!): [LeaguePointSetting!]!
    roundPointSettings(roundId: ID!): [RoundPointSetting!]!
    roundsScheduled(leagueId: ID!): [Round!]!
    roundsCompleted(leagueId: ID!): [Round!]!
    player(playerId: ID!): LeaguePlayer!
    playerRound(playerId: ID!): [PlayerRound!]!
    playerPointsEarned(playerId: ID!, roundId: ID): [PointEarned!]
    playerScoreForHole(playerId: ID!, holeId: ID): PlayerHole!
    playerScoresForRound(playerId: ID!, roundId: ID): [PlayerHole!]!
}

# TODO: Mutation questions/todos Re: Shopify's GraphQL guidelines:
# - Should deleted items be returned?
# - Should returned objects be nullable?
# - Should I move object names as prefix (eg userCreate instead of createUser)
# - mutations for grossScore


type Mutation {
    # User 
    createUser(input: CreateUserInput!): AuthPayload!
    loginUser(email: String!, password: String!): AuthPayload!
    updateUser(input: UpdateUserInput!): User!
    # League  (must be authorizedAsAdmin to change league settings)
    createLeague(input: CreateLeagueInput!) League!
    deleteLeague(leagueId: ID!)
    updateBasicLeagueInfo(leagueId: ID!, input: UpdateBasicLeagueInput): League!
    createLeaguePointSetting(leagueId: ID!, input: CreateLeaguePointSettingInput): LeaguePointSetting!
    updateLeaguePointSetting(leagueId: ID!, input: UpdateLeaguePointSettingInput): LeaguePointSetting!
    deleteLeaguePointSetting(leagueId: ID!)
    createRoundPointSetting(roundId: ID! input: CreateRoundPointSettingInput): RoundPointSetting!
    updateRoundPointSetting(roundId: ID! input: UpdateRoundPointSettingInput): RoundPointSetting!
    deleteRoundPointSetting(roundId: ID!)
    createLeaguePlayer(playerId: ID!, input: CreateLeaguePlayerInput): LeaguePlayer!
    updateLeaguePlayer(playerId: ID!, input: UpdateLeaguePlayerInput): LeaguePlayer!
    deleteLeaguePlayer(playerId: ID!)
    createRound(leagueId: ID!, input: CreateRoundInput): Round!
    updateRound(roundId: ID!, input: UpdateRoundInput): Round!
    deleteRound(leagueId: ID!)
    addPlayerToRound(roundId: ID!, playerId: ID!, input: AddPlayerToRoundInput): Round!
    updatePlayerRound(roundId: ID!, playerId: ID!, input: UpdatePlayerRoundInput): Round!
    deletePlayerFromRound(roundId: ID!, playerId: ID!)
    # - is leagueID necessary in add/UpdatePlayerPoint? What should I be returning?
    addPlayerPoint(playerId: ID!, roundId: ID!, leagueId: ID!):  PlayerHole!
    updatePlayerPoint(playerId: ID!, roundId: ID!, leagueId: ID!): PlayerHole!
    deletePlayerPoint(playerId: ID!, roundId: ID!): [PlayerHole!]!
    addLeaguePrize(prizeId: ID!, input: addLeaguePrizeInput): LeaguePrize!
    updateLeaguePrize(prizeId: ID!, input: updateLeaguePrizeInput): LeaguePrize!
    deleteLeaguePrize(prizeId: ID!)


    # TODO: Implement these Comment mutations after MVP
    # createRoundComment(input: CreatePostInput!): Post!
    # deleteRoundComment(id: ID!): Post!
    # updateRoundComment(id: ID!, input: UpdatePostInput!): Post!
    # createLeagueComment(input: CreateCommentInput!): Comment!
    # deleteLeagueComment(id: ID!): Comment!
    # updateLeagueComment(id: ID!, input: UpdateCommentInput!): Comment!
}
input CreateUserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}
input UpdateUserInput {
    firstName: String
    lastName: String
    email: String
    password: String
}
input CreateLeagueInput {
    name: String!
    startDate: DateTime
    endDate: DateTime
}
input UpdateBasicLeagueInput {
    name: String
    startDate: DateTime
    endDate: DateTime
}
input CreateLeaguePointSettingInput {
    name: String!
    weight: Float!
    default: Boolean!
}
input UpdateLeaguePointSettingInput {
    name: String
    weight: Float
    default: Boolean
}
input CreateRoundPointSettingInput {
    name: String!
    weight: Float!
}
input UpdateRoundPointSettingInput {
    name: String
    weight: Float
}
input CreateLeaguePlayerInput {
    customName: String!
    handicap: Float
    authorizedForAdmin: Boolean!
}
input UpdateLeaguePlayerInput {
    customName: String
    handicap: Float
    authorizedForAdmin: Boolean
}
input CreateRoundInput {
    golfCourse: String!
    holesPlayed: Int
    date: DateTime!
    name: String!
    completed: Boolean!
}
input UpdateRoundInput {
    golfCourse: String
    holesPlayed: Int
    date: DateTime
    name: String
    completed: Boolean
}
input AddPlayerToRoundInput {
    handicap: Float
    holesPlayed: Int
    roundScore: Int
}
input UpdatePlayerRoundInput {
    handicap: Float
    holesPlayed: Int
    roundScore: Int
}
# TODO: Not very sure about this
input AddPlayerPointInput {
    weightMultiplier: Int!
}

type User {
    id: ID!
    username: String!
    lastName: String!
    firstName: String!
    email: String!
    password: String!
    leagues: [League!]!
}

type League {
    id: ID!
    name: String!
    startDate: DateTime
    endDate: DateTime
    players: [LeaguePlayer!]!
    prizes: [LeaguePrize!]!
    # determines if league shows up on User's dashboard
    archived: Boolean!
}

type LeaguePrize {
    id: ID!
    league: League!
    description: String!
    prize: String!
}

type LeaguePlayer {
    id: ID!
    user: User!
    leagueId: League!
    customName: String
    # This field is initially set by the user that sets up the league
    authorizedForAdmin: Boolean!
    rounds: [Round!]!
    handicap: Float
}

type Round {
    id: ID!
    golfCourse: String!
    holesPlayed: Int
    date: DateTime!
    players: [LeaguePlayer!]!
    name: String
    # TODO: should I keep this completed field??
    completed: Boolean
    pointSettings: [RoundPointSetting!]!
    playerScoresByHole: [PlayerHole!]!
}

# TODO: Is this type even necessary or is it redundant since points can be calculated from PointEarned?
type PlayerRound {
    # TODO: is an id: ID! field needed here?
    id: ID!
    round: Round!
    points: [PointEarned!]!
    # TODO: How are these 2 fields affect things if players are recording hole-by-hole scores
    holesPlayed: Int
    roundScores: [PlayerHole!]! 
    # This field will be set to whatever the player's league-level handicap is on the day of the round 
    handicap: Float
    # TODO: link to PlayerHole?
}

type LeaguePointSetting {
    id: ID!
    league: League!
    name: String!
    weight: Float!
    defaultRoundPoint: Boolean!
}

type RoundPointSetting {
    # TODO: is an id: ID! field needed here?
    id: ID!
    round: Round!
    name: String!
    weight: Float!
}

# TODO: Am I going about this correctly?
type PointEarned {
    # TODO: is an id: ID! field needed here?
    id: ID!
    pointId: RoundPointSetting!
    league: League!
    round: Round!
    player: LeaguePlayer!
}

type PlayerHole {
    # TODO: is an id: ID! field needed here?
    id: ID!
    round: Round!
    player: LeaguePlayer!
    hole: Int!
    pointEarned: [PointEarned!]!
    grossScore: Int!
    # TODO: how to make this non-nullable if they're tracking handicaps?
    netScore: Int
}

# TODO: Implement these comment types after MVP
# type Comment {
#     id: ID!
#     text: String!
#     author: User!
#     post: Post!
# }
# input CreateCommentInput {
#     text: String!
#     post: ID!
# }
# input UpdateCommentInput {
#     text: String
# }


